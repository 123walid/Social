// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkid String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
// relations
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follows[] @relation("following")
  following Follows [] @relation("follower")
  notifications Notification[] @relation("userNotifications")// recieved notifications by user
  notificationsCreated Notification[] @relation("notificationCreator") // created by the user
}
model Post{
  id String @id @default(cuid())
  autherId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  auther User @relation(fields: [autherId],references: [id],onDelete: Cascade) // cascade mean delete user all posts deleted
  comments Comment[]
  Likes Like[]
  notifications Notification[]
}
model Comment{
  id String @id @default(cuid())
  content String
  autherId String
  postId String
  CreatedAt DateTime @default(now())

  auther User @relation(fields: [autherId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade) 
  notifications Notification[]
  @@index([autherId,postId])// composite index
}
model Like{
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)

  @@index([userId,postId])
  @@unique([userId,postId])// same user can't likes twice
}
model Follows{
followerId String 
followingId String
createdAt DateTime @default(now())

follower User @relation("follower",fields: [followerId],references: [id],onDelete: Cascade)
following User @relation("following",fields: [followingId],references: [id],onDelete: Cascade)
@@index([followerId,followingId])
@@id([followerId,followingId]) //composet id
}
model Notification{
id String @id @default(cuid())
userId String
creatorId String
type NotificationType
read Boolean @default(false)
postId String?
commentId String?
CreatedAt DateTime @default(now())

//relations

user User @relation("userNotifications",fields: [userId],references: [id],onDelete: Cascade)
creator User @relation("notificationCreator",fields: [creatorId],references: [id],onDelete: Cascade)
post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)
comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)

@@index([userId,CreatedAt])
}
enum NotificationType{
  LIKE 
  COMMENT 
  FOLLOW 
}